# -*- coding: utf-8 -*-
"""phase2.Recognizing Handwritten Digits with Deep Learning for Smarter AI Applications."ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10eQfsneBGD7iuVGnyHHcOG34mzzpKaJC

1. Upload the Dataset
"""

from google.colab import files
import pandas as pd
import io

# Upload your CSV dataset
uploaded = files.upload()

# Load dataset into a DataFrame;
df = pd.read_csv('/content/test.csv')

# Show first few rows
df.head()

"""Explore the Dataset"""

# Dataset shape and columns
print("Shape:", df.shape)
print("Columns:", df.columns.tolist())

# Dataset info (data types, non-null counts)
df.info()

# Summary statistics of numeric columns
df.describe()

"""Check for Missing Values and Duplicates"""

# Count missing values per column
print("Missing values in each column:\n", df.isnull().sum())

# Count duplicate rows
print("Number of duplicate rows:", df.duplicated().sum())

""" Data Preprocessing


"""

# Set the target column (replace 'label' with your actual target column name)
target = 'pixel0'

# Separate features and target
X = df.drop(columns=[target])
y = df[target]

# Normalize features if needed (example for pixel values scaled 0-255)
X = X / 255.0

print("Data preprocessing completed.")

"""Split Dataset into Train and Test Sets"""

from sklearn.model_selection import train_test_split

# Split data (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print("Train shape:", X_train.shape)
print("Test shape:", X_test.shape)

"""Train a Machine Learning Model"""

from sklearn.ensemble import RandomForestClassifier

# Initialize model
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

print("Model training complete.")

"""Evaluate the Model"""

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Predict on test data
y_pred = model.predict(X_test)

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")

# Classification report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion matrix
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""Predict on New Data Sample"""

# Predict on a single example (first test sample)
sample = X_test.iloc[0].values.reshape(1, -1)
prediction = model.predict(sample)[0]

print("Prediction for first test sample:", prediction)
print("Actual label:", y_test.iloc[0])

"""Save the Trained Model"""

import joblib
from google.colab import files

# Save model to file
joblib.dump(model, 'model.pkl')
print("Model saved as model.pkl")

# Download model file to local system
files.download('model.pkl')

""" Deploy with Gradio (Interactive Web App)"""

!pip install gradio

import gradio as gr
import numpy as np
from PIL import Image
import joblib

# Load the model (if not already loaded)
model = joblib.load("model.pkl")

# Define prediction function
def predict_digit(image):
    # Convert image to grayscale and resize to 28x28
    image = image.convert("L").resize((28, 28))
    image_array = np.array(image).reshape(1, -1) / 255.0
    prediction = model.predict(image_array)[0]
    return f"Predicted Digit: {prediction}"

# Create Gradio interface without 'shape'
interface = gr.Interface(
    fn=predict_digit,
    inputs=gr.Image(image_mode='L', label="Draw a digit (0â€“9)"),
    outputs=gr.Textbox(label="Prediction"),
    title="ðŸ§  Handwritten Digit Recognizer",
    description="Draw a digit (0â€“9) and the trained model will predict it."
)

# Launch the app
interface.launch(share=True)